/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.96
 * Generated at: 2024-11-20 05:59:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import com.sg.cartitempojo.CartItem;

public final class cart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("com.sg.cartitempojo.CartItem");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Your Cart</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        h1 {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .container {\r\n");
      out.write("            margin: 20px auto;\r\n");
      out.write("            width: 80%;\r\n");
      out.write("            border-collapse: collapse;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        table {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            border-collapse: collapse;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        th, td {\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            border: 1px solid #ddd;\r\n");
      out.write("            text-align: left;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        th {\r\n");
      out.write("            background-color: #f2f2f2;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .total {\r\n");
      out.write("            text-align: right;\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        img {\r\n");
      out.write("            width: 80px;\r\n");
      out.write("            height: 80px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        button {\r\n");
      out.write("            padding: 5px 10px;\r\n");
      out.write("            background-color: #FF734C;\r\n");
      out.write("            border: none;\r\n");
      out.write("            color: white;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        button:hover {\r\n");
      out.write("            background-color: #ff3d00;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <h1>Your Shopping Cart</h1>\r\n");
      out.write("    <a href = \"GetRestaurant\"> <button>Home</button> </a>\r\n");
      out.write("    <a href = \"ClearCartItem\"> <button>Clear Cart</button> </a>\r\n");
      out.write("    \r\n");
      out.write("    ");

        // Retrieve the cart from the session
        Map<Integer, CartItem> cart = (Map<Integer, CartItem>) session.getAttribute("cart");

        if (cart != null && !cart.isEmpty()) {
    
      out.write("\r\n");
      out.write("    <table class=\"container\">\r\n");
      out.write("        <thead>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th>Image</th>\r\n");
      out.write("                <th>Item Name</th>\r\n");
      out.write("                <th>Description</th>\r\n");
      out.write("                <th>Price (₹)</th>\r\n");
      out.write("                <th>Total (₹)</th>\r\n");
      out.write("                <th>Quantity</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("        </thead>\r\n");
      out.write("        <tbody>\r\n");
      out.write("            ");
 
                double grandTotal = 0.0;
                for (CartItem item : cart.values()) {
                    double total = item.getQuantity() * item.getPrice();
                    grandTotal += total;
            
      out.write("\r\n");
      out.write("            \r\n");
      out.write("            <tr>\r\n");
      out.write("                <td><img src=\"");
      out.print( item.getImage() );
      out.write("\" alt=\"Item Image\"></td>\r\n");
      out.write("                <td>");
      out.print( item.getName() );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( item.getDescription() );
      out.write("</td>\r\n");
      out.write("                \r\n");
      out.write("                <td>");
      out.print( item.getPrice() );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( total );
      out.write("</td>\r\n");
      out.write("                <td>\r\n");
      out.write("                    <form action=\"UpdateCartItem\" method=\"get\">\r\n");
      out.write("                        <input type=\"hidden\" name=\"cartItemId\" value=\"");
      out.print( item.getItemId() );
      out.write("\">\r\n");
      out.write("                        <select name=\"quantity\" >\r\n");
      out.write("                            ");
 
                                // Dynamically generate quantity options from 1 to 10
                                for(int i = 0; i <= 10; i++) {
                            
      out.write("\r\n");
      out.write("                                <option value=\"");
      out.print( i );
      out.write('"');
      out.write(' ');
      out.print( (i == item.getQuantity()) ? "selected" : "" );
      out.write('>');
      out.print( i );
      out.write("</option>\r\n");
      out.write("                            ");
 
                                }
                            
      out.write("\r\n");
      out.write("                        </select>\r\n");
      out.write("                        <a href=\"UpdateCartItem?cartItemId=");
      out.print( item.getItemId() );
      out.write("\"><button>Update</button></a>\r\n");
      out.write("                    </form>\r\n");
      out.write("                        <a href=\"RemoveCartItem?cartItemId=");
      out.print( item.getItemId() );
      out.write("\"><button>Delete</button></a>\r\n");
      out.write("                </td> \r\n");
      out.write("            </tr>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td colspan=\"5\" class=\"total\">Grand Total:</td>\r\n");
      out.write("                <td>");
      out.print( grandTotal );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("        </tbody>\r\n");
      out.write("    </table>\r\n");
      out.write("    ");
 
        } else { 
    
      out.write("\r\n");
      out.write("    <p>Your cart is empty.</p>\r\n");
      out.write("    ");
 
        } 
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <br/>\r\n");
      out.write("    <a href=\"checkout.jsp\"><button>Proceed to Checkout</button></a>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
