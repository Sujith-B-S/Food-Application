package com.sg.userdaoimpl;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.sg.userdao.UserDAO;
import com.sg.userpojo.User;

public class UserDAOImpl implements UserDAO{
	
	List<User> userList = new ArrayList<User>();
	private final String INSERT_QUERY = "insert into `user`(`username`,`email`,`password`,`mobile`) values (?,?,?,?)";
	private final String FETCH_ALL_QUERY = "select * from `user`";
	private final String FETCH_SPECIFIC_QUERY = "select * from `user` where `email` = ?";
	private final String UPDATE_QUERY = "update `user` set `address` = ? where `email` = ?";
	private final String DELETE_QUERY = "delete from `user` where `email` = ?";
	
	

	private String url = "jdbc:mysql://localhost:3306/foodclone";
	private String nm = "root";
	private String pass = "root";
	private Connection con;

	private PreparedStatement pstmt;

	private int status;
	private Statement stmt;
	private ResultSet resultSet;
	private User u;
	private User user;
	
	public UserDAOImpl()
	{
		try {
			
			Class.forName("com.mysql.cj.jdbc.Driver");
			con = DriverManager.getConnection(url, nm, pass);
			
		} catch (Exception e) {

		e.printStackTrace();
		}
	}
	
	@Override
	public int addUser(User u) {
		
		try {
			
			pstmt = con.prepareStatement(INSERT_QUERY);
			pstmt.setString(1, u.getUsername());
			pstmt.setString(2, u.getEmail());
			pstmt.setString(3, u.getPassword());
			pstmt.setInt(4, u.getMobile());
			
			status = pstmt.executeUpdate();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return status;
		
	}
	
	@Override
	public List<User> getAllUsers() {

		try {
			
			stmt = con.createStatement();
			resultSet = stmt.executeQuery(FETCH_ALL_QUERY);
			userList = extractUserListFromResultSet(resultSet);  
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return userList;
		
	}
	
	List<User> extractUserListFromResultSet(ResultSet resultSet)
	{
		try {
			
			while(resultSet.next())
			{
				userList.add(new User(resultSet.getString("username"),
						resultSet.getString("email"),
						resultSet.getString("password"),
						resultSet.getString("mobile"),
						resultSet.getString("address")));
			}  
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return userList;
	}
	
	@Override
	public User getUser(String email) {

		try {
			
			pstmt = con.prepareStatement(FETCH_SPECIFIC_QUERY);
			pstmt.setString(1, email);
			resultSet = pstmt.executeQuery();
			
			while(resultSet.next())
			{
				user = new User(resultSet.getString("username"),resultSet.getString("email"),
						resultSet.getString("password"),resultSet.getString("mobile"), resultSet.getString("address"));
			}
//			userList = extractUserListFromResultSet(resultSet);
//			if(!userList.isEmpty())
//			{
//				u = userList.get(0);
//			}
//			else
//			{
//				System.out.println("No Records");
//				System.exit(0);
//			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return user;
		
	}

	@Override
	public int updateUser(User u) {

		try {
			
			pstmt = con.prepareStatement(UPDATE_QUERY);
			pstmt.setString(1, u.getAddress());
			pstmt.setString(2, u.getEmail());
			status = pstmt.executeUpdate();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return status;
	}
	
	@Override
	public int deleteUser(String email) {

		try {
			
			pstmt = con.prepareStatement(DELETE_QUERY);
			pstmt.setString(1,email);
			status = pstmt.executeUpdate();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return status;
		
	}

}

